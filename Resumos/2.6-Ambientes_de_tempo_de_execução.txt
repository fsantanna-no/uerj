<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
</head>

# Resumo

1. Introdução
    1. estrutura de um compilador
    2. atribuições do ambiente de execução
    3. exemplos
2. Alocação Dinâmica
    1. pilha e chamadas de função
    2. heap e coletores de lixo
    3. TODO: finalização (atexit, finalizers, destructors)
3. Máquinas Virtuais
    1. interpretação
    2. exemplos
    3. JIT

<!--
- controlam o estado global de execução de um programa
    - memória, registradores, I/O, CPUs
- estrutura geral de um compilador
    - código fonte -> linguagem alvo (binário)
    - análise / front end
    - síntese / back end
    - tabela de símbolos
    - execução:
- atribuições do RTE
    - organização e controle de memória
    - protocolo de chamadas de funções
    - chamadas de sistema
    - escalonamento
- ambientes de execução externos
    - p-threads
- crt0.o (c-run-time)
- alocação dinâmica
    - pilha
    - chamadas de função
        - registros de ativação
            - chamada
            - prólogo
            - epílogo
            - link de acesso
        - stack unwinding
        - otimização de chamada de cauda
    - heap
        - gerenciador de memória
            - rastreia espaço livre
            - dificuldades
                - variação do tamanhos dos blocos
                - ordem de alocação e desalocação arbitrária
            - propriedades
                - localidade, fragmentação, execução
        - desalocação
            - manual
                - vazamento de memória (memory leaks)
                - ponteiros pendentes (dangling pointers)
            - automático, coleta de lixo
                - contagem de referência
                - coletor por rastreamento
                    - tri-color mark-and-sweep
                        - incremental
                    - generacional
                    - compactação
-->

# Ambientes de tempo de execução

- controlam o estado global de execução de um programa
    - memória, registradores, I/O, CPUs
- requisitos mínimos para execução de um programa
    - estado inicial, bibliotecas, variáveis de ambiente
- tempo de execução ("em paralelo") ou tempo de compilação (instruções embuídas 
  no código gerado)

## Linguagens de programação

- TODO: compilação e interpretação

- programas são escritos em uma linguagem de programação
- uma notação formal para comandar a execução de instruções/algoritmos para uma 
  máquina


- antes de executar, o código fonte precisa ser compilado

## Estrutura geral de um compilador

- compilador é um software que transforma o código fonte de um programa escrito 
  em uma dada linguagem em uma outra linguagem alvo
- tipicamente, a linguagem alvo é a linguagem binária de máquina na qual o 
  programa deve executar
- a transformação é feita em etapas bem definidas, cada uma se baseia em 
  teorias e técnicas distintas:

- Análise / Front-end:
    - CARACTERES       --[analisador léxico]-->
      TOKENS           --[analisador sintático]-->
      ÁRVORE SINTÁTICA --[analisador semântico]-->
      ÁRVORE SINTÁTICA --[gerador de código intermediário]--> RI/CI
- Síntese / Back-end:
    - RI/CI             --[gerador de código]-->
      CÓDIGO DE MÁQUINA --[otimizador de código]-->
      CÓDIGO DE MÁQUINA --[ligador]-->
      CÓDIGO DE MÁQUINA (não relocável)
- Tabela de Símbolos
    - preenchida e compartilhada por todas as fases

- as fases são divididas entre análise e síntese, também conhecidas como "front 
  end" e "back end" do compilador
- o back end do compilador lida com a geração de código para uma arquitetura 
  específica
    - envolve conhecimentos "baixo nível"
    - interpretação vs compilação
- idealmente, a divisão bem definida entre front end e back end permite 
  "plugar" a análise de diferentes linguagens para uma dada arquitetura
  (trocando apenas o front end)
  ou gerar código de uma linguagem para diferentes arquiteturas (trocando
  apenas o back end)
    - GCC e LLVM são exemplos de ferramentas com esse fim

- a tabela de símbolos serve como um banco de dados compartilhado por todas as 
  fases
    - guarda linha,      tipo,              escopo
    - mensagens de erro, análise semântica, geração de código
    - inclusive pela fase de execução
        - o formato ELF (Executable and Linkable Format)
            - .symtab: símbolos locais, debugger
            - .dynsym: símbolos globais, carregamento dinâmico

- Execução:
    - CÓDIGO DE MÁQUINA --[carregador]--> EXECUÇÃO
    - as fases anteriores acontecem somente uma vez
    - o carregador, toda vez que o programa é executado, pelo SO
        - no linux, `execve()`
        - copia a imagem do disco para a memória
        - copia argumentos de chamada para a pilha
        - inicializa registradores

## Ambientes de tempo de execução

- atribuições do RTE
    - organização e controle de memória
        - mapeamento endereço lógico e físico
        - separação código (RO), dados (RO/RW)
            - imagem [CODE|STATIC|HEAP>|<STACK]
        - controle da heap, pilha, coletor de lixo
    - protocolo de chamadas de funções
        - interoperação com outras bibliotecas
        - passagem de parâmetros
        - carregamento dinâmico de bibliotecas
    - chamadas de sistema
        - I/O
    - escalonamento
        - linguagens concorrentes
- ambientes de execução externos
    - API normal
    - p-threads
        - não pode ser entendido a partir do ambiente que o chama (C)
            - escalonamento, pilhas, tudo escondido
        - faz chamadas de sistema
- crt0.o (c-run-time)
    - ambiente de execução de C
        - parte do carregador
    - inicializa SP, FP
    - preenche vetor de interrupção
    - zera a região BSS
    - chama "main"
- alocação dinâmica
    - pilha
        - locais, temporárias, chamadas de função
        - ponteiro para o topo da pilha (SP)
            - operações de push, pop
    - chamadas de função
        - múltiplas chamadas, chamadas reentrantes
        - chamada e retorno
            - empilha instrução seguinte na chamada
            - desempilha instrução e pula para ela
        - árvores de ativação
            - DFS
                - a menos de exceções ou erros
                - chamadas em pré ordem, retornos em pós ordem
        - convenções de chamada
        - registros de ativação
            - layout
            - endereço de retorno, parâmetros, locais, temporárias
            - FP: ponteiro para o frame
                - FP = SP logo após chamada
                    - para stack trace, FP atual deve ser copiado antes
                - SP = FP logo antes do retorno
            - chamada
                - empilha argumentos            [var]
                - empilha FP                    [fixo]
                - empilha endereço de retorno   [fixo]
                - empilha outros registradores  [fixo]
            - prólogo
                - FP = SP
                - reserva espaço para locais    [fixo]
            - epílogo
                - SP = FP
                - recupera outros registradores
                - recupera endereço de retorno
                - desempilha FP
                - empilha valor de retorno
                - pula para endereço de retorno
            - link de acesso
                - uplink léxico
                - acesso a locais de funções aninhadas (acima)
                - ALGOL, Pascal, ML
        - stack unwinding
        - otimização de chamada de cauda
            - fundamental em linguagens funcionais
            - reaproveitamento da pilha
                - chamada que não usa retornos
                    - altera argumentos
                    - e dá goto, em vez de call
                - quebra debugging
    - heap
        - dados que vivem indefinidamente
        - gerenciador de memória
            - rastreia espaço livre
                - alocação e desalocação (liberação)
            - dificuldades
                - variação do tamanhos dos blocos
                - ordem de alocação e desalocação arbitrária
            - propriedades
                - localidade, fragmentação, execução
            - localidade
                - programas tendem a executar uma pequena fração do código 
                  mexendo em uma pequena fração da memória
                    - hierarquia de memória
                        - disparidade em ordem de grandeza de disco, ram, 
                          cache, registradores
                - TODO: MRU?
            - fragmentação
                - buracos livres entre blocos usados
                    - TODO
                    - best fit
                    - first fit
                - pools de memória
                    - fragmentação 0 para blocos de mesmo tamanho
            - execução
                - TODO
        - desalocação
            - manual
                - C / C++
                - problemas
                    - vazamento de memória (memory leaks)
                    - ponteiros pendentes (dangling pointers)
                - valgrind
            - automático, coleta de lixo
                - lixo: dados que não podem ser referenciados
                    - desalocados quando descobertos
                - LISP'58
                - does not work with type-unsafe languages C/C++
                    - aritmética de ponteiros, casts
                - métricas de performance
                    - tempo total de execução
                    - tempo de pausa
                    - uso de espaço
                    - localidade
                        - TODO
                - referências com acesso
                    - conjunto raíz
                        - variáveis estáticas
                        - variáveis na pilha
                    - uma vez não referenciáveis, nunca mais referenciáveis
                - modificador (mutator)
                    - alocação
                    - passagem e retorno de função
                    - atribuições
                    - término de funções
                - abordagens
                    - acompanhamento do modificador
                        - contagem de referência
                    - percorrimento periódico
                        - coletor por rastreamento
                - contagem de referência
                    - alocação: ref=1
                    - passagem: ref++
                    - atribuição: to--; fr++
                    - término: ref(i)--;
                    - vantagens
                        - simples
                        - imediato e incremental
                    - desvantagens
                        - sem ciclos
                        - caro: dados e CPU
                - coletor por rastreamento
                    - executa periodicamente
                        - ex., quando alcança um limiar
                    - mark-and-sweep
                        - MARK:
                            - a partir do conjunto raiz, percorre todas as 
                              referências recursivamente, marcando-as
                        - SWEEP:
                            - coleta as referências não marcadas
                    - tri-color mark-and-sweep
                        - incremental
                        - branco: candidatos à coleta
                        - cinza: alcançáveis pela raiz, mas com algum filho 
                          ainda branco
                            - inicialmente=conjunto-raiz
                        - pretos: alcançáveis e sem filhos brancos
                            - incialmente=vazio
                        - continuamente remova ref do cinza, seta filhos de ref 
                          para cinza e seta ref para preto
                        - coleta brancos quando cinza está vazio
                    - generacional
                        - objetos morrem jovens (80-98% até 1M de instruções 
                          após o nascimento)
                        - divide a heap em partições (gerações)
                        - quando uma geração enche, move objetos vivos para 
                          próxima geração
                    - compactação
                        - ao detectar objeto vivo, move vivos para nova área
                            - não precisa desalocar mortos
                            - zero fragmentação (maior localidade)

## Máquinas Virtuais

- fase de tradução
    - código fonte -> representação intermediária
- simula uma máquina real
    - busca, decodifica, executa
- mesmos tradeoffs
    - de pilha ou de registrador
- portabilidade
    - OSes, máquinas, browsers, até mesmo hardwares
- JVM (java), Parrot (perl), CLR (.net), Squeak (smalltalk)
- JIT
    - combina a velocidade de compilação
      com a flexibilidade de interpretação
    - latência vs tempo total
        - demora na inicialização
    - detecta sequências de bytecode executadas com frequência e as transforma 
      para linguagem de máquina
        - loops muito longos
    - server vs client code
    - em teoria pode ser mais rápido que compilação
        - por exemplo, pode detectar a CPU e usar instruções específicas
