# 2.1 Estrutura Geral do Compilador

Computadores somente são capazes de executar instruções muito simples e que não 
refletem a maneira como os seres humanos se comunicam, por isso, praticamente 
todo software é escrito em uma linguagem de programação.

De maneira geral, LPs oferecem construções linguísticas mais próximas às 
linguagens naturais que, após serem combinadas em um programa por um humano, 
são automaticamente traduzidas para instruções entendidas pela máquina, num 
processo conhecido como compilação.

    [TRADUÇÃO ENTRE LP E MÁQUINA]
    abcxyz  -> |tradutor| -> 010101 -> |execução|
    (humano)                 (máquina)

A natureza da LP irá determinar que tipo de notação é aceita (sintaxe) e o que 
é possível expressar com essa notação de maneira a controlar a máquina 
(semântica).

## Diferença entre Sintaxe e Semântica

A sintaxe de uma LP define sua a estrutura ou forma.
Para linguagens textuais, a sintaxe define regras sobre como combinar letras 
para formar paralvras (tokens, no contexto de LPs), para então combinar 
palavras para formar sentenças (ou comandos, no contexto de LPs).

O conjunto de regras para a formação de tokens é conhecido como o *léxico* da 
linguagem, e vai reconhecer, por exemplo, que o caracter 1 seguido de 0 forma o 
número 10 e que qualquer sequência de caracteres que não começam por um dígito 
formam um identificador:

    10              (token numérico)
    minha_variavel  (token para um identificador)

Já o conjunto de regras para a formação de comandos a partir de tokens é 
conhecido como a *sintaxe* da linguagem, e vai determinar, por exemplo, que uma 
expressão pode ser formada por números ou identificadores separados por um 
operador (um outro tipo de token):

    10 + minha_variavel     (expressão)

Tão importante quanto reconhecer formas aceitas pela linguagem, é reconhecer 
por completo formas *não* são aceitas pela linguagem.
Por exemplo, em C identificadores não podem começar com um dígito:

    0minha_variavel     (não é nem um número nem um identificador)

## Estrutura de um Compilador

Durante o processo de tradução dos programas escritos em uma LP para intruções 
de máquina, sintaxe e semântica são tratadas em fases diferentes, já que se 
baseiam em teorias e técnicas distintas:

    ESTRUTURA GERAL DE UM COMPILADOR
    - Análise / Front-end:
        - CARACTERES       --[analisador léxico]-->
          TOKENS           --[analisador sintático]-->
          ÁRVORE SINTÁTICA --[analisador semântico]-->
          ÁRVORE SINTÁTICA --[gerador de código intermediário]--> RI/CI
    - Síntese / Back-end:
        - RI/CI             --[montador]-->
          CÓDIGO DE MÁQUINA --[otimizador]-->
          CÓDIGO DE MÁQUINA --[ligador]-->
          CÓDIGO DE MÁQUINA (não relocável)
    - Tabela de Símbolos
        - preenchida e compartilhada por todas as fases
        - banco de dados com linha,tipo,escopo

O compilador é o software responsável pela tradução do código fonte para o 
código de máquina e é dividio em duas grandes partes.
O "front end" (análise) lida com a sintaxe e semântica da linguagem, 
verificando se o programa de entrada é válido e gerando uma representação 
intermediária (e.g., assembly), com os detalhes sintáticos eliminados.
Já o "back end" (síntese) lida com a geração de código para uma arquitetura 
específica, transformando a representação intermediária no código final.
Idealmente, essa divisão bem definida permite a combinação de diferentes "back 
ends" com diferente "front ends", permitindo compilar diferentes linguagens 
para diferentes máquinas (LxM combinações).
Essa arquitetura é seguida por ferramentas bem sucedidas, tais como o GCC e o 
LLVM, que permitem que diferentes linguagens sejam compiladas para diferentes 
plataformas.

## Sintaxe

As duas primeiras fases do "front end", análise léxica e sintática, lidam com a 
forma da LP.
O objetivo dessas fases é o de reconhecer e transformar a entrada textual 
"concreta" em uma forma abstrata, padronizada, de mais fácil manipulação para 
as fases seguintes.
Tipicamente o programa de entrada é transformado em uma árvore sintática 
abstrata (AST).
Como exemplo, independentemente da sintaxe concreta para somar dois números 
("2+1" em C ou "(+ 2 1)" em LISP), a representação abstrata será a mesma:
        +
       / \
      2   1

Note que em geral uma LP pode descrever infinitos programas, dado que suas 
construções permitem repetições ou composições:

    [IDENTIFICADORES E COMANDOS POSSÍVEIS]
    x, xx, xxx, ...                 (infinitos identificadores)
    while(1) { while(1) { ... } }   (infinitos comandos while)

Dessa maneira, as regras que descrevem o léxico e a sintaxe devem ser 
expressadas em "meta-linguages" capazes de exprimir todas as infinitas 
possibilidades através de uma forma finita.
As duas meta-linguagens mais comuns são as expressões regulares, para o léxico, 
e as BNFs (Backus-Naur form), para a sintaxe.

### Análise léxica (scanning)

A primeira fase do compilador lida com a transformação de um fluxo de 
caracteres escritos na LP para um fluxo de tokens a ser repassado para a 
análise sintática.
Tipicamente os tokens representam números, identificadores, palavras reservadas 
e operadores aceitos pela LP.
Além do que ele representa, um token pode carregar atributos adicionais, tais 
como o seu conteúdo completo (lexeme) e a linha onde aparece.

O exemplo a seguir, em C, separa uma sequência de caracteres em tokens:

    x = 1;  =>  <ID,"x",1>  <"=",1>  <NUM,"1",1> <";",1>

O programa que reconhece a entrada como válida e a transforma em tokens é 
conhecido como "scanner" e pode ser gerado automaticamente por uma ferramenta 
"geradora de scanners".
Essas ferramentas se baseiam na teoria de linguagens regulares (LRs) e sua 
correspondência com autômatos finitos determinísticos (DFAs), ou seja, que 
qualquer linguagem regular pode ser reconhecida por um DFA.

### Análise sintática (parsing)

As contruções sintáticas são consideravelmente mais complexas que as léxicas, 
tipicamente descrevendo aninhamento e regras recursivas.
Dessa forma, um formalismo mais poderoso que LRs se faz necessário, como por 
exemplo as linguagens livre de contexto (CFL) e sua correspondência com 
autômatos de pilha.

A toda LP está associada uma gramática que descreve as construções aceitas pela 
linguagem.
A notação BNF é usada para esse fim e é composta pelos seguintes elementos:

    - terminais:       representam os tokens vindo do scanner
    - não terminais:   representam as regras de composição
    - produções:       descrevem as regras de composição
    - símbolo inicial: um não terminal representando programas válidos (em
                       geral o que aparece em primeiro na gramática)

A BNF a seguir ilustra uma gramática com aninhamento e recursão:

    Exp := Exp '+' Exp      (regra com recursão)
        | '(' Exp ')'       (regra com aninhamento)
        |  <id>             (regra básica)

A partir do símbolo inicial, essa gramática pode gerar expressões como "v", 
"((v))" e "v+(v)".

BNFs descrevem gramáticas livres de contexto (CFGs), sendo que o lado esquerdo 
de cada produção só pode conter um único símbolo não terminal (e nenhum 
terminal).

O programa que reconhece programas de entrada de acordo com uma CFG é conhecido 
como "parser" e também pode ser gerado automaticamente por uma ferramenta 
"geradora de parsers".

Existem duas técnicas básicas para a construção de parsers, ambas usam um 
algoritmo determinístico com o auxílio de um pilha.
Na técnica top down, também conhecida como preditiva, o topo da pilha sempre 
contém o não terminal da CFG que será reconhecido a seguir, começando pelo 
símbolo inicial da CFG.
Na técnica bottom up, o topo da pilha sempre contém o último símbolo 
reconhecido, sempre terminando com o símbolo inicial da CFG (em caso de 
sucesso).

## Semântica Estática

Após a fase de análise sintática, o front end de um compilador prossegue para a 
fase de análise semântica, na qual tipicamente cria uma árvore sintática 
abstrata (AST) (caso ainda não exista) e a anota com informações semânticas que 
impõem novas restrições ao programa.

CFGs não são suficientemente poderosas para descrever restrições necessárias a 
sintaxe de uma LP.
Por exemplo, se identificadores são declarados antes de seus usos e se o número 
de argumentos passados a uma função corresponde ao que sua declaração 
especifica.

### Esquemas de Tradução

Esquemas de tradução fazem a ligação entre fase sintática e semântica, 
permitindo, por exemplo, a construção de ASTs anotadas.
Em sua forma mais geral, tradução orientada por sintaxe (SDT), permite associar 
ações semânticas a regras da CFG, executando um trecho de código sempre que a 
regra for derivada.

Tipicamente, a SDT pode criar uma AST extendendo uma CFG com ações semânticas:

    Exp = Exp + Exp { $$.node = new Node('+', $1.node, $3.node); }

A notação é originada da ferramenta "yacc", que executa o trecho de código 
entre chaves sempre que a regra associada for reduzida, gerando dinamicamente a 
AST da derivação em curso.
Os símbolos $$, $1 e $3 representam, respectivamente, o não terminal sendo 
reduzido e dois dos três elementos que compõem a regra e estão no topo da 
pilha.

No exemplo acima, o atributo "node" do não terminal sendo reduzido é construído 
a partir dos atributos "node" de seus filhos no topo da pilha.
Essa forma de atribuir atributos aos símbolos é conhecida como sintetizada 
(S-attributes) e é a mais comum em parsers bottom up.
A outra forma de atribuição é conhecida como herdada, na qual os filhos podem 
herdar atributos de seus pais.
Parsers top down usam uma variação conhecida como L-attributes que permite
o uso de atributos herdados e sintetizados.
Note que para parsers top down, o uso de atributos herdados é dificultado, dado 
que a redução da regra ocorre quando os filhos já foram tratados.
Isso não acontece no método preditivo, que já sabe que vai derivar os filhos a 
partir de um pai.

Além da AST, a tabela de símbolos também pode ser preenchida durante a SDT, uma 
vez que as ações semânticas permitem efeitos colaterais globais.
Como exemplo, sempre que uma regra de declaração de variáveis for derivada, a 
tabela de símbolos associada ao identificador pode ser aumentada com o tipo 
declarado.
Assim, toda vez que o identificador for usado em comandos e expressões, a 
análise semântica pode verificar se o uso está compatível com o seu tipo.

### Sistemas de Tipos

A tarefa mais complicada da semântica estática é a de verificação de tipos em 
programas, já que ela depende da análise do programa como um todo.
Um sistema de tipos é um conjunto de regras que atribui tipos às partes do 
programa e verifica se as conexões entre essas partes está consistente.
Dentre as possíveis verificações, podemos destacar

    - se variáveis são declaradas e tipadas antes de seus usos
    - se o número de argumentos e seus tipos correspondem ao esperado pela 
      assinatura da função
    - se os operandos de uma operação possuem os tipos esperados

O objetivo principal de um sistema de tipos é o de prevenir bugs sem a 
necessidade de executar o programa.
Em outras palavras, um sistema de tipos assegura que uma certa classe de 
programas incorretos nunca será executada.
Essa visão contrasta com um sistema de testes (TDD) que tenta assegurar que um 
programa correto nunca falha, executando-o à exaustão.

Além da detecção de bugs, um sistema de tipos também ajuda no entendimento e 
documentação de programas e permite a otimização de trechos de código (e.g., 
evitando checagens em tempo de execução).

Sistemas de tipos são tão pervasivos em LPs que é comum categorizá-las de 
acordo com o seus sistemas de tipos.
Por exemplo, a separação entre linguagens estáticas e dinâmicas se dá 
principalmente pela tipagem dos programas ser feita em tempo de compilação 
(tipagem estática) ou em tempo de execução (tipagem dinâmica).
Em linguagens dinâmicas, a verificação de operações é feita somente no momento 
de executá-las, quando os tipos ("tags", nesse contexto) de seus operandos são 
finalmente verificados.
Como forma de unir a flexibilidade de linguagens dinâmicas com a confiabilidade 
de linguagens estáticas, alguns projetos estendem linguagens dinâmicas com 
sistemas de tipos graduais, nos quais é possível anotar partes do código com 
tipos para verificação estática.
Como exemplos, a Microsoft introduziu recentemente TypeScript que estende 
JavaSript com tipagem gradual, enquanto que o Facebook introduziu Hack, uma 
extensão à PHP com os mesmos objetivos.

Algumas linguagens, mesmo tenho um sistema de tipos estático, não requerem 
declarações explícitas de tipo no código, que podem ser inferidos 
automaticamente pelo compilador.
A linguagem ML introduziu esse conceito no fim da década de 70, que hoje é 
adotado em outras linguagens como Haskell, Go e até (parcialmente) em versões 
recentes de C++:

    auto v = 1.0;     // (tipo de "v" é inferido como "float")

Por outro lado, C e C++ são casos atípicos (mas extremamente populares) de 
linguagens com sistemas de tipos e declarações explícitas, mas que não oferecem 
garantias estáticas satisfatórias (possuem sistemas de tipos fracos).
O uso de aritmética de ponteiros, casts explícitos de tipos e uniões sem tags 
expõem o sistema de tipos a diversas "brechas" que podem acarretar em estouro 
de buffers (buffer overflows) e acesso a regiões de memória não controlados 
pelo programa.

TODO: estrutural vs nominal
TODO: tipos polimórficos

Tarefas corriqueiras em programas podem exigir a conversão de um valor para um 
novo tipo.
Um exemplo comum, é o de ler uma entrada do teclado como string e tentar 
reinterpretar esse valor como um número:

    idade = io.read()
    if idade > 18 then
        ...
    end

Novamente, dependendo da LP e de seu sistema de tipos, existem diferentes 
semânticas para a conversão de tipos.
Em conversões implícitas (conhecidas como coersões), o compilador é responsável 
por verificar e adicionar instruções de maneira a efetuar a conversão 
automáticamente.
Em conversões explícitas (conhecidas como casts), o sistema de tipos obriga que 
o programador faça a conversão manualmente através de uma operação (e.g.  
tonumber(idade)).

Se em conversões os operandos se adaptam aos seus operadores, em sobrecarga de 
operadores, são os operadores que se adaptam aos seus operandos.
O exemplo típico é o operador de soma que se comporta de maneira diferente se 
seu operandos são inteiros ou reais, gerando instruções diferentes para a 
execução do programa.
Muitas linguagens permitem que o programador adapte o uso de operadores e 
funções de acordo com seus operandos (C++ com overloading e Lua com 
metamétodos, por exemplo).


